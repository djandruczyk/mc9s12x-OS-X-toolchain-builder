#!/bin/bash
# Making FreeEMS Crosstools for FreeEMS under OS-X 
#
# David J. Andruczyk, 2010
#

# ADJUST THIS TO SUIT

CWD=$(pwd)

DSTDIR=${CWD}/toolchain
CC=gcc
HAVE_LLVM=$(gcc -v 2>&1|grep -c LLVM)
if [ $HAVE_LLVM -gt 0 ] ; then
	echo "LLVM compiler detected, searching for alternative..."
	for i in `ls -1 /usr/bin |grep gcc` ; do
		if [ $(${i} -v 2>&1|grep -c LLVM) -eq 1 ] ; then
			echo "$i is unsuitable"
		else
			echo "$i is OK"
			CC=$i
			break;
		fi
	done
fi
#echo "CC is $CC"

function build_mc9s12x_binutils {
pushd "${BUILDDIR}" >/dev/null
# First: build binutils for mc9s12x
echo "mc9s12x binutils!"
if [ -f mc9s12x-build/GOOD ] ; then
        return 0
fi
if [ -d mc9s12x-build ] ; then
	rm -rf mc9s12x-build
fi
mkdir mc9s12x-build 
pushd mc9s12x-build  >/dev/null
"${BUILDDIR}"/FreeScale-s12x-binutils/src/configure --disable-werror --target=m68hc11 --enable-targets=m68hc11,m68hc12,xgate --program-prefix=m68hc11- --disable-nls --prefix="${DSTDIR}" && \
make -j"${PROCS}" && \
make install && \
popd >/dev/null && \
popd >/dev/null
if [ $? -eq 0 ]; then
        touch mc9s12x-build/GOOD
        return 0
else
        return $?
fi
}

function build_xgate_binutils {
pushd "${BUILDDIR}" >/dev/null
echo "xgate binutils!"
# make xgate version
if [ -f xgate-build/GOOD ] ; then
        return 0
fi
if [ -d xgate-build ] ; then
	rm -rf xgate-build
fi
mkdir xgate-build 
pushd xgate-build 
"${BUILDDIR}"/FreeScale-s12x-binutils/src/configure --target=xgate --enable-targets=m68hc11,m68hc12,xgate --program-prefix=xgate- --disable-nls --prefix="${DSTDIR}" && \
make && \
make install && \
popd >/dev/null && \
popd >/dev/null
if [ $? -eq 0 ]; then
        touch xgate-build/GOOD
        return 0
else
        return $?
fi
}

function build_gcc {
pushd "${BUILDDIR}" >/dev/null
if [ -f gcc-build/GOOD ] ; then
        return 0
fi
if [ -d gcc-build ] ; then
	rm -rf gcc-build
fi
mkdir gcc-build
pushd gcc-build
OLDPATH=$PATH
export PATH=$DSTDIR/bin:$PATH
export CC=${CC}
"${BUILDDIR}"/FreeScale-s12x-gcc/src/configure --target=m68hc11 --program-prefix=m68hc11- --disable-nls --enable-languages=c --prefix="$DSTDIR" && \
make &&
make install && \
export PATH=$OLDPATH && \
popd >/dev/null && \
popd >/dev/null
if [ $? -eq 0 ]; then
        touch gcc-build/GOOD
        return 0
else
        return $?
fi
}

function build_newlib {
#Now newlib
#RESET ENV VARS back to normal, as newlib sets things up its own way
pushd "${BUILDDIR}" >/dev/null
if [ -f newlib-build/GOOD ] ; then
        return 0
fi
if [ -d newlib-build ] ; then
	rm -rf newlib-build
fi
mkdir newlib-build
OLDPATH="${PATH}"
export PATH="${DSTDIR}"/bin:"${PATH}"
export CC=${CC}
pushd newlib-build && \
"${BUILDDIR}"/FreeScale-s12x-newlib/src/configure --target=m68hc11 --disable-multilib --disable-shared --disable-threads --disable-nls --prefix="${DSTDIR}" && \
make  && \
make install && \
export PATH="${OLDPATH}" && \
popd
if [ $? -eq 0 ]; then
        touch newlib-build/GOOD
        return 0
else
        return $?
fi
}


function build_toolchain {
# Make a clean TARGET location to stick everything
if [ ! -d "${DSTDIR}" ]; then
	mkdir "${DSTDIR}"
else
	echo "${DSTDIR} ALREADY EXISTS, thismay not be what you want!!!"
	sleep 2
fi
echo "Target is ${DSTDIR}"	
build_mc9s12x_binutils
res=$?
binutils_mc9s12x_res=$res
if [ $res -ne 0 ] ; then
	printf "\b\nFailure compiling hcs12x binutils, result code %i\n" $res
	exit -1
fi
build_xgate_binutils
res=$?
binutils_xgate_res=$res
if [ $res -ne 0 ] ; then
	printf "\b\nFailure compiling xgate binutils, result code %i\n" $res
	exit -1
fi

build_gcc
res=$?
gcc_res=$?
if [ $res -ne 0 ] ; then
	printf "\b\nFailure compiling GCC, result code %i\n" $res
	exit -1
fi

build_newlib
res=$?
newlib_res=$?
if [ $res -ne 0 ] ; then
	printf "\b\nFailure compiling newlib, result code %i\n" $res
	exit -1
fi

echo "
	Compilation Results:
	Binutils OS-X->hc11:         $binutils_mc9s12x_res
	Binutils OS-X->xgate:        $binutils_xgate_res
	GCC OS-X->hc11:		     $gcc_res
	Newlib OS-X->hc11:           $newlib_res

		"

if [ $binutils_mc9s12x_res -eq 0 ] && \
	[ $binutils_xgate_res -eq 0 ] && \
	[ $gcc_res -eq 0 ] && \
	[ $newlib_res -eq 0 ] ; then
	echo "Everything compiled OK!!!"
fi
}

function cleanup {
	echo "Cleaning out build directories"
	clean_binutils
	clean_gcc
	clean_newlib
	echo "All build dirs cleaned out"
}

function clean_binutils {
pushd "${BUILDDIR}" >/dev/null
	if [ -d mc9s12x-build ] ; then
		rm -rf mc9s12x-build
	fi
	if [ -d xgate-build ] ; then
		rm -rf xgate-build
	fi
}

function dl_binutils {
# checkout Dave's fork of Seank's FreeScale-s12x-binutils
pushd "${BUILDDIR}" >/dev/null
echo "Cloning binutils git tree locally"
if [ ! -d FreeScale-s12x-binutils ] ; then
	git clone http://github.com/djandruczyk/FreeScale-s12x-binutils.git 
else
	pushd FreeScale-s12x-binutils
	git pull
	popd
fi
popd >/dev/null
}

function dl_gcc {                                                               
pushd "${BUILDDIR}" >/dev/null
if [ ! -d FreeScale-s12x-gcc ] ; then
    echo "Downloading GCC from seank's repo"
    git clone git://github.com/seank/FreeScale-s12x-gcc.git
else
    pushd FreeScale-s12x-gcc >/dev/null
    git pull
    popd >/dev/null
fi
popd >/dev/null
}

function dl_newlib {
pushd "${BUILDDIR}" >/dev/null
if [ ! -d FreeScale-s12x-newlib ] ; then
	git clone git://github.com/seank/FreeScale-s12x-newlib.git
else
	pushd FreeScale-s12x-newlib >/dev/null
	git pull
	popd >/dev/null
fi
popd >/dev/null
}

function clean_gcc {
pushd "${BUILDDIR}" >/dev/null
# I used the sources from gcc-m68hc1x from ubuntu/debian
if [ -d gcc-build ] ; then
	rm -rf gcc-build
fi
popd >/dev/null
}

function clean_newlib {
pushd "${BUILDDIR}" >/dev/null
# I used the sources from newlib-m68hc1x from ubuntu/debian
if [ -d newlib-build ] ; then
	rm -rf newlib-build
fi
popd >/dev/null
}

function done_all {
echo "

				ALL DONE!!!
Binary should be in the $CWD/Output Directory

"
}

if [ $# -ne 1 ] ; then
	echo "Invalid args, need <all|get_pre_reqs|clean>"
	exit
fi

case "$1" in
	all) 
	dl_binutils
	dl_gcc
	dl_newlib
	build_toolchain 
	done_all
	;;
	get_pre_reqs)
	dl_binutils
	dl_gcc
	dl_newlib
	;;
	clean)
	cleanup
	;;
	*)
	echo "Invalid choice!"
	exit -1
	;;
esac
